generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// ============================================================================
// LICENSE SYSTEM - Server-First Architecture
// ============================================================================

model License {
  id          String   @id @default(cuid())
  licenseKey  String   @unique // Renamed from 'key' for clarity
  type        String   // Valid: 'trial' | 'standard' | 'premium' | 'enterprise'
  status      String   @default("active") // Valid: 'active' | 'expired' | 'revoked' | 'suspended'
  expiryDate  DateTime? // null = lifetime license
  maxUsers    Int      @default(1)
  features    String   // JSON array of feature strings: ["basic", "clients", "receivables", ...]
  issuedTo    String?  // Person or company name
  companyName String?  // Company name (optional)
  issuedAt    DateTime @default(now())
  lastCheck   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  devices     LicenseDevice[]
  
  @@map("licenses")
}

model LicenseDevice {
  id                String   @id @default(cuid())
  licenseId         String
  deviceId          String   @unique // Unique device fingerprint hash
  deviceInfo        String   // JSON: { os, browser, platform, screen, userAgent }
  fingerprintHistory String  @default("[]") // JSON array: previous fingerprints for tolerance checks
  firstSeenAt       DateTime @default(now())
  lastSeenAt        DateTime @default(now())
  lastValidatedAt   DateTime @default(now())
  status            String   @default("active") // Valid: 'active' | 'blocked'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  license           License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  
  @@index([licenseId, status])
  @@map("license_devices")
}

model LicenseBackup {
  id         String   @id @default(cuid())
  licenseId  String?  // Optional reference for filtering
  deviceId   String?  // Optional reference for filtering
  snapshot   String   // JSON: complete serialized state of license + device
  reason     String   // Valid: 'manual' | 'auto' | 'before_update' | 'recovery'
  createdAt  DateTime @default(now())
  
  @@index([licenseId])
  @@index([deviceId])
  @@map("license_backups")
}

// ============================================================================
// CLIENT MANAGEMENT
// ============================================================================

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  notes     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  receivables Receivable[]
  
  @@map("clients")
}

// ============================================================================
// RECEIVABLES
// ============================================================================

model Receivable {
  id               String   @id @default(cuid())
  clientId         String
  customerName     String
  amount           Float
  dueDate          DateTime
  status           String   @default("pending")
  description      String?
  notes            String?
  commissionRate   Float?   @default(0.05)
  commissionAmount Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("receivables")
}

// ============================================================================
// GOALS
// ============================================================================

model Goal {
  id            String   @id @default(cuid())
  title         String
  periodType    String
  periodStart   DateTime
  periodEnd     DateTime
  targetAmount  Float
  targetSales   Int?
  currentAmount Float    @default(0)
  currentSales  Int      @default(0)
  status        String   @default("active")
  description   String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("goals")
}